@model SadguruCRM.Models.Servicing

@{
    ViewBag.Title = "Create Service";
}

<h2>Service</h2>
@using (Html.BeginForm("Create", "Servicings", FormMethod.Post, new { id = "ServicingCreate", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Create</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group row">
        <div class="col">
            @Html.Label("Customer", "Customer", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("CustomerID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker", required = "required", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Service No", htmlAttributes: new { @class = "control-label required" })
            @Html.EditorFor(model => model.ServicingNo, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.ServicingNo, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Consult Person", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("ConsultPerson", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
            @Html.Label("Designation", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("ConsultPersonDesignation", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
        </div>
    </div>
    <div class="form-group row">
        @Html.Hidden("Customers_Billing_Address_Mapping_ID")

        <div class="col">
            @Html.Label("AddressLine1", "Address Line 1", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingAddressLine1", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
            @Html.Label("AddressLine2", "Address Line 2", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingAddressLine2", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
            @Html.Label("AddressLine3", "Address Line 3", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingAddressLine3", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>

        <div class="col">
            @Html.Label("LocationID", "Location", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("BillingLocationID", (IEnumerable<SelectListItem>)ViewBag.LocationID, "-- SELECT --", new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="col">
            @Html.Label("CityId", "City", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("BillingCityID", (IEnumerable<SelectListItem>)ViewBag.CityID, "-- SELECT --", new { @class = "form-control", @disabled = "disabled" })
            @*@Html.DropDownList("CityID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control" , @onchange = "populateCity(this);" })*@
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            @Html.Label("Pincode", "Pincode", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingPincode", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
            @Html.Label("State", "State", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("BillingStateID", (IEnumerable<SelectListItem>)ViewBag.StateID, "-- SELECT --", new { @class = "form-control selectpicker", @disabled = "disabled", @data_live_search="true" })
        </div>
        <div class="col">
            @Html.Label("Cell Nos", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingCellNumber", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
            @Html.Label("Emails", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingEmail", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
        <div class="col">
            @Html.Label("Tel Nos", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("BillingTelNo", new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
        </div>
    </div>
    <hr />
    <h5>Required Service Details</h5>
    <div class="form-group row">

        <div class="col">
            @Html.Label("Type Of Premise", "Type Of Premise", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(model => model.TypeOfPremisesID, null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker", required = "required", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.TypeOfPremisesID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.PremisesArea, "Premise Area", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PremisesArea, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.PremisesArea, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.PremisesAppSqFtArea, "Sq. Ft. Area", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PremisesAppSqFtArea, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.PremisesAppSqFtArea, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Period_Of_Contract_Start_Date, "Period of Contract (Start)", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Period_Of_Contract_Start_Date, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Period_Of_Contract_Start_Date, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Period_Of_Contract_End_Date, "Period of Contract (End)", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Period_Of_Contract_End_Date, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Period_Of_Contract_End_Date, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.ServiceGroupID, "Service", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(model => model.ServiceGroupID, null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search="true", @onchange = "populateServices(this);", required = "required" })
            @Html.ValidationMessageFor(model => model.ServiceGroupID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.ServiceID, "Sub-Service", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(model => model.ServiceID, null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", required = "required", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.ServiceID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.FrequencyOfServiceID, "Frequency Of Service", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(model => model.FrequencyOfServiceID, null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", required = "required", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.FrequencyOfServiceID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Servicing_Frequency_Number, "Service Frequency no.", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Servicing_Frequency_Number, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.Servicing_Frequency_Number, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.System_Servicing_Datetime, "System Service Date", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.System_Servicing_Datetime, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.System_Servicing_Datetime, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Servicing_Datetime, "Service Date", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Servicing_Datetime, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Servicing_Datetime, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Servicing_Time, "Service Time", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Servicing_Time, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Servicing_Time, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Actual_Servicing_Datetime, "Actual Service Date", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Actual_Servicing_Datetime, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Actual_Servicing_Datetime, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.Actual_Servicing_Time, "Actual Service Time", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Actual_Servicing_Time, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Actual_Servicing_Time, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            @Html.Label("Techician", "Techician", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("TechnicianID", (IEnumerable<SelectListItem>)ViewBag.TechnicianID, htmlAttributes: new { @class = "selectpicker", @multiple = "multiple", @required = "required", @data_live_search="true" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.VendorID, "Vendor", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("VendorID", (IEnumerable<SelectListItem>)ViewBag.VendorID, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.VendorID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.PaymentModeID, "Payment Mode", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("PaymentModeID", (IEnumerable<SelectListItem>)ViewBag.PaymentModeID, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.PaymentModeID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.PaymentTermID, "Payment Term", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("PaymentTermID", (IEnumerable<SelectListItem>)ViewBag.PaymentTermID, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search="true" })
            @Html.ValidationMessageFor(model => model.PaymentTermID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.PaidByCustomer, "Paid By Customer", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PaidByCustomer, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PaidByCustomer, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.BalanceAmount, "Balance Amount", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.BalanceAmount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BalanceAmount, "", new { @class = "text-danger" })
        </div>
    </div>
    <hr />
    <h5>Issued Chemicals</h5>
    <div class="form-group row">

        <div class="col">
            @Html.Label("Chemical", "Chemical", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("ChemicalID", (IEnumerable<SelectListItem>)ViewBag.ChemicalID, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search="true" })
        </div>
        <div class="col">
            @Html.Label("Technician", "Technician", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("ChemicalTechnicianID", (IEnumerable<SelectListItem>)ViewBag.TechnicianID, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search="true" })
        </div>
        <div class="col">
            @Html.Label("Qty", "Qty", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("ChemicalQty", new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="col">
            @Html.Label("UOM", "UOM", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("UOMID", (IEnumerable<SelectListItem>)ViewBag.UOMID, "-- SELECT --", new { @class = "form-control selectpicker", @data_live_search="true" })
        </div>
        <div class="col">
            @Html.Label("Service Status", "Service Status", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(model => model.Service_Status_ID, (IEnumerable<SelectListItem>)ViewBag.ServiceStatusID, "-- SELECT --", new { @class = "form-control selectpicker" , @data_live_search="true"})
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-12">
            @Html.Label("Service Instructions", htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.ServicingInstructions, 4, 200, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ServicingInstructions, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display:none;">
        <div class="col-md-2">
            @Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display:none;">
        <div class="col-md-2">
            @Html.LabelFor(model => model.LastUpdatedDate, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.LastUpdatedDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastUpdatedDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display:none;">
        @Html.LabelFor(model => model.CreatedBy, "CreatedBy", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-2">
            @Html.DropDownList("CreatedBy", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display:none;">
        @Html.LabelFor(model => model.LastUpdatedBy, "LastUpdatedBy", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-2">
            @Html.DropDownList("LastUpdatedBy", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.LastUpdatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-12">
            <input type="submit" value="Save" class="btn btn-secondary" style="float:right;" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @type = "button", @class = "btn btn-outline-secondary" })
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>
@*For Multiselect - Bootstrap Select*@
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js"></script>

<!-- (Optional) Latest compiled and minified JavaScript translation files -->
@*<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/i18n/defaults-*.min.js"></script>*@
<script>

    function populateServices(obj) {
        debugger;
            if ($(obj).val() == "") {
                var services = "<select id='ServiceID' name = 'ServiceID' required='required'>";
                services = services + '<option value>--SELECT--</option>';
                services = services + '</select>';
                $('#ServiceID').html(services);
                //$(obj).closest("#ServiceID").html(services);
            } else {
                $.ajax({
                    type: "post",
                    url: "/Leads/GetServices",
                    data: { ServiceGroupID: $(obj).val() },
                    datatype: "json",
                    traditional: true,
                    success: function (data) {
                        var services = "<select id='ServiceID' name = 'ServiceID' required='required'>";
                        services = services + '<option value="">--SELECT--</option>';
                        for (var i = 0; i < data.length; i++) {
                            services = services + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                        }
                        services = services + '</select>';
                        $('#ServiceID').html(services);
                        //$(obj).closest('#ServiceID').html(services);
                    }
                });
            }
        }
    $("#Period_Of_Contract_Start_Date").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });
    $("#Period_Of_Contract_End_Date").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });
    $("#System_Servicing_Datetime").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });
    $("#Servicing_Datetime").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });
    $("#Servicing_Time").datetimepicker({
        format: 'hh:mm A',
        useCurrent: false
    });
    $("#Actual_Servicing_Datetime").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });
    $("#Actual_Servicing_Time").datetimepicker({
        format: 'hh:mm A',
        useCurrent: false
    });
    $.validator.addMethod(

        "australianDate",
        function (value, element) {
            // put your own logic here, this is just a (crappy) example
            return value.match(/(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4} (2[0-3]|[01][0-9]):[0-5][0-9]$/);
        },
        "Please enter a date in the format DD/MM/YYYY hh:mm."
    );
    $.validator.addMethod(
        "dateOnlyOrBlank",
        function (value, element) {
            // put your own logic here, this is just a (crappy) example
            if (value) {
                return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
            } else {
                return true;
            }
        },
        "Please enter a date in the format dd/mm/yyyy."
    );
        $('#ServicingCreate')
        .validate({
            rules: {
                Period_Of_Contract_Start_Date: {
                    dateOnlyOrBlank: true
                },Period_Of_Contract_End_Date: {
                    dateOnlyOrBlank: true
                },System_Servicing_Datetime: {
                    dateOnlyOrBlank: true
                },
                Servicing_Datetime: {
                    dateOnlyOrBlank: true
                },
                Actual_Servicing_Datetime: {
                    dateOnlyOrBlank: true
                }
            }
        });
    $("#CustomerID").change(function () {
        var cust = $(this).val();
        if (cust == "") {
            alert("Please select Customer");
            //$("#divBillingAddress").slideUp();
            //$("#divServiceAddreses").slideUp();
            //$("#divServicesRequired").slideUp();
        }
        else {
            $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetCustomerDataForServicing", "Servicings")',
                    data: { custID: $(this).val() },
                    datatype: "json",
                    //async: false,
                    traditional: true,
                success: function (data) {
                    if (data == "No Business Address Found") {
                        alert("No Business Address Found");
                    } else if (data == "No Service Address Found") {
                        alert("No Service Address Found");
                    } else {
                        debugger;
                        $("#Customers_Billing_Address_Mapping_ID").val(data.bill.Customers_Billing_Address_Mapping_ID);


                        $("#ConsultPerson").val(data.customer.ConsultPerson);
                        $("#ConsultPersonDesignation").val(data.customer.ConsultPersonDesignation);

                        $("#BillingAddressLine1").val(data.bill.AddressLine1);
                        $("#BillingAddressLine2").val(data.bill.AddressLine2);
                        $("#BillingAddressLine3").val(data.bill.AddressLine3);
                        $("#BillingLocationID").val(data.bill.BillingLocationID);
                        $("#BillingCityID").val(data.bill.BillingCityID);
                        $("#BillingPincode").val(data.bill.BillingPincode);
                        $("#BillingStateID").val(data.bill.BillingStateID);


                        $("#BillingCellNumber").val(data.strBillingCellNos);
                        $("#BillingEmail").val(data.strBillingEmails);
                        $("#BillingTelNo").val(data.strBillingTelNos);

                        //create new Service Address Sections total - 1
                        //for (var i = 1; i < data.servicesAddressList.length; i++) {
                        //    var newel = $('.SingleServiceAddress:last').clone();
                        //    $(newel).insertAfter(".SingleServiceAddress:last");
                        //}
                        //for (var i = 0; i < data.servicesAddressList.length; i++) {
                        //    debugger;
                        //    var SingleServiceAddress = $('.SingleServiceAddress:eq(' + i + ')');
                        //    SingleServiceAddress.find('#Customers_Service_Address_Mapping_ID').val(data.servicesAddressList[i].Customers_Service_Address_Mapping_ID);
                        //    SingleServiceAddress.find('#ServiceAddressLine1').val(data.servicesAddressList[i].AddressLine1);
                        //    SingleServiceAddress.find('#ServiceAddressLine2').val(data.servicesAddressList[i].AddressLine2);
                        //    SingleServiceAddress.find('#ServiceAddressLine3').val(data.servicesAddressList[i].AddressLine3);
                        //    SingleServiceAddress.find('#ServiceLocationID').val(data.servicesAddressList[i].ServiceLocationID);
                        //    SingleServiceAddress.find('#ServiceCityID').val(data.servicesAddressList[i].ServiceCityID);
                        //    SingleServiceAddress.find('#ServicePincode').val(data.servicesAddressList[i].ServicePincode);
                        //    SingleServiceAddress.find('#ServiceStateID').val(data.servicesAddressList[i].ServiceStateID);
                        //    SingleServiceAddress.find('#ServiceConsultPerson').val(data.servicesAddressList[i].ServiceAddressConsultPerson);
                        //    //if (data[i].GST) {
                        //    //    SingleService.find('#GST').val("True");
                        //    //} else {
                        //    //    SingleService.find('#GST').val("False");
                        //    //}


                        //}
                    }
                },
                    error: (error) => {
                         console.log(JSON.stringify(error));
                        }
                    });

                }

            //$("#divBillingAddress").slideDown();
            //$("#divServiceAddreses").slideDown();
            //$("#divServicesRequired").slideDown();
        }
    );
</script>
<style>

    textarea {
        max-width: 100% !important;
    }
</style>