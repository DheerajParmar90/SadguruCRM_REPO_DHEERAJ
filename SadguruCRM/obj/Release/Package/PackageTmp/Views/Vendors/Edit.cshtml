@model SadguruCRM.Models.Vendor

@{
    ViewBag.Title = "Edit Vendor";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Vendors", FormMethod.Post, new { id = "VendorCreate", enctype = "multipart/form-data", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Edit Vendor</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.VendorID)
    @Html.HiddenFor(model => model.CreatedByUserID)
    @Html.HiddenFor(model => model.CreatedDate)
    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.VendorName, "Vendor Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.VendorName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.VendorName, "", new { @class = "text-danger" })
        </div>
        <div class="col">
        </div>
        <div class="col">
            @Html.LabelFor(model => model.VendorNo, "Vendor Code", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.VendorNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.VendorNo, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.VendorDate, "Date", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.VendorDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.VendorDate, "", new { @class = "text-danger" })
        </div>
        <div class="col">
        </div>
    </div>
    <hr />
    <h6>OFFICE ADDRESS</h6>
    <div class="form-group row">

        <div class="col">
            @Html.LabelFor(model => model.AddressLine1, "Address Line 1", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AddressLine2, "Address Line 2", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AddressLine3, "Address Line 3", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AddressLine3, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AddressLine3, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.LocationID, "Location", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("LocationID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.CityID, "City", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("CityID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.StateID, "State", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("StateID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.ContactPerson, "Contact Person", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ContactPerson, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.ContactNumber, "Tel No", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.EmailID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.CellNo1, "Cell No", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.CellNo1, new { htmlAttributes = new { @class = "form-control", @minlength = "10", @maxlength = "10" } })
            @Html.EditorFor(model => model.CellNo2, new { htmlAttributes = new { @class = "form-control", @style = "display:none;", @minlength = "10", @maxlength = "10" } })
            @Html.EditorFor(model => model.CellNo3, new { htmlAttributes = new { @class = "form-control", @style = "display:none;", @minlength = "10", @maxlength = "10" } })
            @Html.EditorFor(model => model.CellNo4, new { htmlAttributes = new { @class = "form-control", @style = "display:none;", @minlength = "10", @maxlength = "10" } })
            @Html.EditorFor(model => model.CellNo5, new { htmlAttributes = new { @class = "form-control", @style = "display:none;", @minlength = "10", @maxlength = "10" } })
            <i class="fa fa-plus btn btn-primary addTextboxButton" onclick="AddCellNo(this);"></i>
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
    </div>
    <hr />
    <h6>RESIDENTIAL ADDRESS</h6>
    <hr />
    <h6>GST & ACCOUNT DETAILS</h6>
    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.GSTNo, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.GSTNo, new { htmlAttributes = new { @class = "form-control", @minlength = "15", @maxlength = "15" } })
            @Html.ValidationMessageFor(model => model.GSTNo, "", new { @class = "text-danger" })
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
    </div>

    <hr />
    <h6>ACCOUNT DETAILS</h6>

    <div class="form-group row account1">
        <div class="col">
            @Html.LabelFor(model => model.AccountName1, "Account Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountName1, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountName1, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountNo1, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountNo1, "Account No", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountNo1, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.BankName1, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.BankName1, "Bank", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BankName1, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.IFSCCode1, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.IFSCCode1, "IFSC Code", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IFSCCode1, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountBranch1, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountBranch1, "Branch", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountBranch1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row account2" style="display:none;">
        <div class="col">
            @Html.LabelFor(model => model.AccountName2, "Account Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountName2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountName2, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountNo2, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountNo2, "Account No", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountNo2, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.BankName2, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.BankName2, "Bank", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BankName2, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.IFSCCode2, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.IFSCCode2, "IFSC Code", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IFSCCode2, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountBranch2, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountBranch2, "Branch", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountBranch2, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group row account3" style="display:none;">
        <div class="col">
            @Html.LabelFor(model => model.AccountName3, "Account Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountName3, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountName3, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountNo3, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountNo3, "Account No", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountNo3, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.BankName3, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.BankName3, "Bank", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BankName3, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.IFSCCode3, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.IFSCCode3, "IFSC Code", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IFSCCode3, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountBranch3, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountBranch3, "Branch", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountBranch3, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row account4" style="display:none;">
        <div class="col">
            @Html.LabelFor(model => model.AccountName4, "Account Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountName4, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountName4, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountNo4, "Account No", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountNo4, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountNo4, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.BankName4, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.BankName4, "Bank", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BankName4, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.IFSCCode4, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.IFSCCode4, "IFSC Code", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IFSCCode4, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountBranch4, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountBranch4, "Branch", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountBranch4, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row account5" style="display:none;">
        <div class="col">
            @Html.LabelFor(model => model.AccountName5, "Account Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountName5, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountName5, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountNo5, "Account No", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountNo5, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountNo5, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.BankName5, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.BankName5, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BankName5, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.IFSCCode5, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.IFSCCode5, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IFSCCode5, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.AccountBranch5, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AccountBranch5, "Branch", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccountBranch5, "", new { @class = "text-danger" })
        </div>
    </div>

    <div><i class="fa btn btn-primary addTextboxButton" onclick="AddAccount(this);">Add Account</i></div>
    <hr />

    <div class="form-group row">
        <div class="col">
            @Html.LabelFor(model => model.SupplierType, htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("SupplierType", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SupplierType, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.LabelFor(model => model.PaymentTerms, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PaymentTerms, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PaymentTerms, "", new { @class = "text-danger" })
        </div>
        <div class="col">

        </div>
        <div class="col">

        </div>
        <div class="col">

        </div>
    </div>
    <hr />
    <h6>SERVICEWISE VENDOR</h6>
    <div class="form-group row">


        <div class="col-3">
            @Html.Label("Services", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("Services", null, htmlAttributes: new { @class = "form-control selectpicker", @multiple = "multiple" })
        </div>

        <div class="col-3">
            @Html.Label("Cities", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("Cities", null, htmlAttributes: new { @class = "form-control selectpicker", @multiple = "multiple" })
        </div>

        <div class="col-3">
            @Html.Label("Locations", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("Locations", null, htmlAttributes: new { @class = "form-control selectpicker", @multiple = "multiple" })
        </div>

        <div class="col-3">
        </div>
    </div>

    <div class="form-group">
        <div style="float:right;">
            <input type="submit" value="Save" class="btn btn-secondary" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @type = "button", @class = "btn btn-outline-secondary" })
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>
@*For Multiselect - Bootstrap Select*@
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js"></script>
<script>

    $(document).ready(function () {

        $("#Services").selectpicker('val', @Html.Raw(Json.Encode(@ViewBag.ServicesArray))).selectpicker("refresh");
        $("#Cities").selectpicker('val', @Html.Raw(Json.Encode(@ViewBag.CitiesArray))).selectpicker("refresh");
        $("#Locations").selectpicker('val', @Html.Raw(Json.Encode(@ViewBag.LocationsArray))).selectpicker("refresh");

        if ('@Model.CellNo2' != '') {
            $("#CellNo2").css("display", "block");
        }
        if ('@Model.CellNo3' != '') {
            $("#CellNo3").css("display", "block");
        }
        if ('@Model.CellNo4' != '') {
            $("#CellNo4").css("display", "block");
        }
        if ('@Model.CellNo5' != '') {
            $("#CellNo5").css("display", "block");
        }


        if ('@Model.AccountName2' != '') {
            $(".account2").css("display", "flex");
        }
        if ('@Model.AccountName3' != '') {
            $(".account3").css("display", "flex");
        }
        if ('@Model.AccountName4' != '') {
            $(".account4").css("display", "flex");
        }
        if ('@Model.AccountName5' != '') {
            $(".account5").css("display", "flex");
        }
    });
    $("#VendorDate").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false,
        defaultDate: new Date()
    });

    $.validator.addMethod(
        "dateOnlyOrBlank",
        function (value, element) {
            // put your own logic here, this is just a (crappy) example
            if (value) {
                return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
            } else {
                return true;
            }
        },
        "Please enter a date in the format dd/mm/yyyy."
    );

    $('#VendorCreate')
        .validate({
            rules: {
                VendorDate: {
                    dateOnlyOrBlank: true
                }
            }
        });
    function AddCellNo(obj) {
        if ($("#CellNo2").css("display") == 'none') {
            $("#CellNo2").css("display", "block")
        } else if ($("#CellNo3").css("display") == 'none') {
            $("#CellNo3").css("display", "block")
        } else if ($("#CellNo4").css("display") == 'none') {
            $("#CellNo4").css("display", "block")
        } else if ($("#CellNo5").css("display") == 'none') {
            $("#CellNo5").css("display", "block")
        }
        return false;
    }
    function AddAccount(obj) {
        if ($(".account2").css("display") == 'none') {
            $(".account2").css("display", "flex")
        } else if ($(".account3").css("display") == 'none') {
            $(".account3").css("display", "flex")
        } else if ($(".account4").css("display") == 'none') {
            $(".account4").css("display", "flex")
        } else if ($(".account5").css("display") == 'none') {
            $(".account5").css("display", "flex")
        }
        return false;
    }
</script>