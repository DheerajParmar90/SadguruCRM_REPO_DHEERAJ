@model SadguruCRM.Models.Employee

@{
    ViewBag.Title = "Create";
}

<h2>Employee</h2>
@using (Html.BeginForm("Create", "Employees", FormMethod.Post, new { id = "EmployeesCreate", enctype = "multipart/form-data", autocomplete = "off" }))
//@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group row">

            <div class="col">
                @Html.LabelFor(model => model.Name, "Full Name", htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.EmployeeCode, "Employee Code", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.EmployeeStatusID, "Employee Status", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownList("EmployeeStatusID", null, "--SELECT--", htmlAttributes: new { @class = "form-control", @data_live_search = "true", @required="required" })
                @Html.ValidationMessageFor(model => model.EmployeeStatusID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.EmployeePhotoPath, "Photo", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EmployeePhotoPath, new { htmlAttributes = new { @class = "form-control", @type = "file", @accept = "image/png,image/gif,image/jpeg,image/jpg" } })
                @Html.ValidationMessageFor(model => model.EmployeePhotoPath, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                <img id="ImagePreview" src="#" alt="Employee Photo Preview" style="max-width:100%;"/>
            </div>
        </div>

        <hr />
        <h5>Permanent Address</h5>
        <div class="form-group row">

            <div class="col">
                @Html.LabelFor(model => model.PermAddressAddressLine1, "Address Line 1", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PermAddressAddressLine1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PermAddressAddressLine1, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.PermAddressAddressLine2, "Address Line 2", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PermAddressAddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PermAddressAddressLine2, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.PermAddressAddressLine3, "Address Line 3", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PermAddressAddressLine3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PermAddressAddressLine3, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.PermAddressLocationID, "Location", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownList("PermAddressLocationID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",  @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.PermAddressLocationID, "", new { @class = "text-danger" })
            </div>

            <div class="col">
                @Html.LabelFor(model => model.PermAddressCityID, "City", htmlAttributes: new { @class = "control-label " })
                @Html.DropDownList("PermAddressCityID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",  @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.PermAddressCityID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.PermAddressPincode, "Pincode", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PermAddressPincode, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.PermAddressPincode, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.PermAddressStateID, "State", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownList("PermAddressStateID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",  @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.PermAddressStateID, "", new { @class = "text-danger" })
            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
        </div>



        <hr />

        <h5>Current Address</h5>
        <div class="form-group row">
            <div class="col-md-12">
                @Html.CheckBox("isCurrentAddressSameasPermanentAddress")
                @Html.Label("IsBillAddSame", "Is Permananent and Current Address same?", htmlAttributes: new { @class = "control-label" })
            </div>
        </div>
        <div class="form-group divCurrentAdd row">
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressAddressLine1, "Address Line 1", htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(model => model.CurrentAddressAddressLine1, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.CurrentAddressAddressLine1, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressAddressLine2, "Address Line 2", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.CurrentAddressAddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CurrentAddressAddressLine2, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressAddressLine3, "Address Line 3", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.CurrentAddressAddressLine3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CurrentAddressAddressLine3, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressLocationID, "Location", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownList("CurrentAddressLocationID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",  @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.CurrentAddressLocationID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressCityID, "City", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownList("CurrentAddressCityID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",  @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.CurrentAddressCityID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressPincode, "Pincode", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.CurrentAddressPincode, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.CurrentAddressPincode, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CurrentAddressStateID, "State", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownList("CurrentAddressStateID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",     @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.CurrentAddressStateID, "", new { @class = "text-danger" })
            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
        </div>

        <hr />
        <h5>Basic Details</h5>
        <div class="form-group row">

            <div class="col">
                @Html.LabelFor(model => model.Gender_Enum, "Gender", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownListFor(model => model.Gender_Enum, (IEnumerable<SelectListItem>)ViewBag.Gender, "--SELECT--", new { @class = "form-control selectpicker", required = "required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.Gender_Enum, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Marital_Status_Enum, "Marital Status", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownListFor(model => model.Marital_Status_Enum, (IEnumerable<SelectListItem>)ViewBag.MaritalStatus, "--SELECT--", new { @class = "form-control selectpicker", required = "required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.Marital_Status_Enum, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.Label("Date Of Birth", htmlAttributes: new { @class = "control-required required" })
                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control", required = "required", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Blood_Group_Enum, "Blood Group", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.Blood_Group_Enum, (IEnumerable<SelectListItem>)ViewBag.BloodGroups, "--SELECT--", new { @class = "form-control selectpicker", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.Blood_Group_Enum, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Qualification, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Qualification, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Qualification, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.PrimaryCellNumber, "Primary Cell Number (Company Number)", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PrimaryCellNumber, new { htmlAttributes = new { @class = "form-control", @minlength = "10", @maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.PrimaryCellNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.SecondaryCellNumber, "Secondary Cell Number (Personal Number)", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.SecondaryCellNumber, new { htmlAttributes = new { @class = "form-control", @minlength = "10", @maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.SecondaryCellNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CompanyEmailID, "Company Email ID", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.CompanyEmailID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyEmailID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.PersonalEmailID, "Personal Email ID", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PersonalEmailID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PersonalEmailID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.BasicSalary, "Basic Salary", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.BasicSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BasicSalary, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.DateOfJoining, "Date Of Joining", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.DateOfJoining, new { htmlAttributes = new { @class = "form-control datepicker", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.DateOfJoining, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.DateOfProbation, "Date Of Probation", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.DateOfProbation, new { htmlAttributes = new { @class = "form-control date", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.DateOfProbation, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.DateOfJConfirmation, "Date Of Confirmation", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.DateOfJConfirmation, new { htmlAttributes = new { @class = "form-control date", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.DateOfJConfirmation, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.DateOfLeaving, "Date Of Leaving", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.DateOfLeaving, new { htmlAttributes = new { @class = "form-control date", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.DateOfLeaving, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.BranchID, "Branch", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownList("BranchID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker", @required="required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.DesignationID, "Designation", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownList("DesignationID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",@required="required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.DesignationID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Report_To, "Report To", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownList("Report_To", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",@required="required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.Report_To, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.DepartmentID, "Department", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownList("DepartmentID", null, "--SELECT--", htmlAttributes: new { @class = "form-control selectpicker",@required="required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Pan_Number, "Pan Number", htmlAttributes: new { @class = "control-label",@style="text-transform:uppercase;" })
                @Html.EditorFor(model => model.Pan_Number, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase", @maxlength= "10" } })
                @Html.ValidationMessageFor(model => model.Pan_Number, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.AADHAR_Number, "AADHAR Number", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.AADHAR_Number, new { htmlAttributes = new { @class = "form-control", @maxlength="14" } })
                @Html.ValidationMessageFor(model => model.AADHAR_Number, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.ESIC_Number, "ESIC Number", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ESIC_Number, new { htmlAttributes = new { @class = "form-control", @maxlength="24" } })
                @Html.ValidationMessageFor(model => model.ESIC_Number, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.PFNumber, "PF Number", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.PFNumber, new { htmlAttributes = new { @class = "form-control", @style="text-transform:uppercase", @maxlength = "24" } })
                @Html.ValidationMessageFor(model => model.PFNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Other, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Other, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Other, "", new { @class = "text-danger" })
            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Work_Experience, "Work Experience", htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.Work_Experience, 5, 100, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Work_Experience, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.POrtfolio, "Portfolio", htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.POrtfolio, 5, 100, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.POrtfolio, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <h5>Bank Details</h5>
        <div class="form-group row">

            <div class="col">
                @Html.LabelFor(model => model.BankID, "Bank", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.BankID, (SelectList)ViewBag.BanksList, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker Location", @required = "required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.BankID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Accounty_Holder_Name, "Account Holder Name", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Accounty_Holder_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Accounty_Holder_Name, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Account_Number, "Account Number", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Account_Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Account_Number, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.IFSC_Code, "IFSC Code", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.IFSC_Code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IFSC_Code, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Bank_Branch, "Bank Branch", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Bank_Branch, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bank_Branch, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.Remarks, 5, 200, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        @*<h5>Login details</h5>
        <div class="form-group row">
            <div class="col">
                @Html.LabelFor(model => model.LoginID, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.LoginID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LoginID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
            <div class="col">

            </div>
        </div>*@

        <div class="form-group">
            <div class="col">
                <input type="submit" value="Save" class="btn btn-secondary" style="float:right;" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @type = "button", @class = "btn btn-outline-secondary" })
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>
@*For Multiselect - Bootstrap Select*@
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js"></script>

<!-- (Optional) Latest compiled and minified JavaScript translation files -->
@*<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/i18n/defaults-*.min.js"></script>*@
<script>
    $("#DateOfLeaving").change(function () {
        if ($(this).val() != '') {
            $("#EmployeeStatusID option:contains('Inactive')").attr('selected', 'selected');
        } else {
            $("#EmployeeStatusID option:contains('Active')").attr('selected', 'selected');
        }
    });
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#ImagePreview').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]); // convert to base64 string
        }
    }

    $("#EmployeePhotoPath").change(function () {
        readURL(this);
    });
    $(function () {
        
        $('div.dropdown-menu.open li').on('keydown', function (e) {
            if (e.keyCode == 38) { // Up
                var previousEle = $(this).prev();
                if (previousEle.length == 0) {
                    previousEle = $(this).nextAll().last();
                }
                var selVal = $('.selectpicker option').filter(function () {
                    return $(this).text() == previousEle.text();
                }).val();
                $('.selectpicker').selectpicker('val', selVal);

                return;
            }
            if (e.keyCode == 40) { // Down
                var nextEle = $(this).next();
                if (nextEle.length == 0) {
                    nextEle = $(this).prevAll().last();
                }
                var selVal = $('.selectpicker option').filter(function () {
                    return $(this).text() == nextEle.text();
                }).val();
                $('.selectpicker').selectpicker('val', selVal);

                return;
            }
        });
    });
    $(document).ready(function () {

        $("#EmployeeCode").val('@ViewBag.EmployeeCode');
        jQuery.validator.methods["date"] = function (value, element) { return true; }
        $("#Name").focus();

        //$.validator.addMethod('date', function (value, element) {
        //    debugger;
        //    if (this.optional(element)) {
        //        return true;
        //    }
        //    var valid = true;
        //    try {
        //        $.datepicker.parseDate('dd/mm/yyyy', value);
        //    }
        //    catch (err) {
        //        valid = false;
        //    }
        //    return valid;
        //    });
    });

    $("#isCurrentAddressSameasPermanentAddress").change(function () {
        if (this.checked) {
            //alert();
            $("#CurrentAddressAddressLine1").val($("#PermAddressAddressLine1").val());
            $("#CurrentAddressAddressLine2").val($("#PermAddressAddressLine2").val());
            $("#CurrentAddressAddressLine3").val($("#PermAddressAddressLine3").val());
            $("#CurrentAddressLocationID").val($("#PermAddressLocationID").val()).selectpicker("refresh");
            $("#CurrentAddressCityID").val($("#PermAddressCityID").val()).selectpicker("refresh");
            $("#CurrentAddressStateID").val($("#PermAddressStateID").val()).selectpicker("refresh");
            $("#CurrentAddressPincode").val($("#PermAddressPincode").val());
            //$(".divCurrentAdd").slideUp();
        } else {
            $("#CurrentAddressAddressLine1").val("");
            $("#CurrentAddressAddressLine2").val("");
            $("#CurrentAddressAddressLine3").val("");
            $("#CurrentAddressLocationID").val("").selectpicker("refresh");
            $("#CurrentAddressCityID").val("").selectpicker("refresh");
            $("#CurrentAddressStateID").val("").selectpicker("refresh");
            $("#CurrentAddressPincode").val("");
            //$(".divCurrentAdd").slideDown();
        }
    });

    $("#DOB").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });

    $("#DateOfJoining").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });

    $("#DateOfProbation").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });

    $("#DateOfJConfirmation").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    });

    $("#DateOfLeaving").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false
    }).on('dp.change', function (e) {
        $("#DateOfLeaving").change();
    });
            //$.validator.addMethod('date', function (value, element) {
            //debugger;
            //if (this.optional(element)) {
            //    return true;
            //}
            //var valid = true;
            //try {
            //    $.datepicker.parseDate('dd/MM/yyyy', value);
            //}
            //catch (err) {
            //    valid = false;
            //}
            //return valid;
            //});
    //$('#EmployeesCreate')
    //    .validate({
    //        rules: {
    //            DOB: {
    //                ausdate: true
    //            },DateOfJoining: {
    //                ausdate: true
    //            },DateOfProbation: {
    //                ausdate: true
    //            },
    //            DateOfJConfirmation: {
    //                ausdate: true
    //            },
    //            DateOfLeaving: {
    //                ausdate: true
    //            }
    //        }
    //    });
</script>
<style>

    textarea {
        max-width: 100% !important;
    }
</style>