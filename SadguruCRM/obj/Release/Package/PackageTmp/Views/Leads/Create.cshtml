@model SadguruCRM.Models.Lead

@{
    ViewBag.Title = "Create";
}

<h5>New Lead</h5>

<hr />

@using (Html.BeginForm("Create", "Leads", FormMethod.Post, new { id = "LeadsCreate", enctype = "multipart/form-data", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <div class="container-fluid">
        <div class="alert alert-danger duplicate" style="padding: 20px; display:none;">
            <strong>WARNING!</strong> &nbsp;&nbsp;Record with the same name and Cell Number Already Exists!
        </div>
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    
    <h6>LEAD DETAILS</h6>
    <div class="form-group row">
        <div class="col-1">
            @Html.Label("Title", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownListFor(model => model.Title, new List<SelectListItem>(){
                                               new SelectListItem() { Text = "Mr.", Value = "Mr." },
                                               new SelectListItem() { Text = "Ms.", Value = "Ms."},
                                               new SelectListItem() { Text = "Mrs.", Value = "Mrs."},
                                               new SelectListItem() { Text = "M/S.", Value = "M/S."}
                                            }, "-- SELECT --", new
                                        {
                                            @class = "form-control selectpicker",
                                            @required = "required",
                                            @data_live_search = "true",
                                            autofocus = "true",
                                            @onchange = "checkDuplicateLead();"
                                            })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
        <div class="col" id="DivCommercialName" style="display:none">
            @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100%", @onchange = "checkDuplicateLead();", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
        </div>
        <div class="col" id="DivFirstName">
            @Html.Label("First Name", htmlAttributes: new { @class = "control-label required" })
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @required = "required", @onchange = "checkDuplicateLead();", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
        <div class="col" id="DivLastName">
            @Html.Label("Last Name", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @onchange = "checkDuplicateLead();", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Date", htmlAttributes: new { @class = "control-label required" })
            @Html.EditorFor(model => model.LeadDate, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
            @Html.ValidationMessageFor(model => model.LeadDate, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Consult Person", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.ConsultPerson, new { htmlAttributes = new { @class = "form-control", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.ConsultPerson, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Designation", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.ConsultPersonDesignation, new { htmlAttributes = new { @class = "form-control", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.ConsultPersonDesignation, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="form-group row">

        <div class="col">
            @Html.Label("Address Line 1", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Address Line 2", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Address Line 3", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.AddressLine3, new { htmlAttributes = new { @class = "form-control", @maxlength = "50" } })
            @Html.ValidationMessageFor(model => model.AddressLine3, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Location", "Location", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("LocationID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker Location", @required = "required", @data_live_search = "true" })
            <div class="valerror">@Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })</div>
            @foreach (var location in ViewBag.LocationsIDBranchesIDPairs)
            {
                <input type="hidden" id="LocationID@(location.Key)" value="@(location.Value)">
            }
        </div>
        <div class="col">
            @Html.Label("City", "City", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("CityID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @required = "required", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">


        <div class="col">
            @Html.Label("Pincode", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control", @minlength = "6", @maxlength = "6", @type = "number" } })
            @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("State", "State", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("StateID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Tel No", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.TelNo, new { htmlAttributes = new { @class = "form-control CustTelNo", @maxlength = "50" } })
            @*<input type="button" class="btn-danger deleteTextboxButton" value="-" onclick="deleteTextbox(this);">*@
            <i class="fa fa-minus btn btn-danger deleteTextboxButton" onclick="deleteTextbox(this);"></i>
            @Html.ValidationMessageFor(model => model.TelNo, "", new { @class = "text-danger" })
            <i class="fa fa-plus btn btn-primary addTextboxButton" onclick="AddCustTelNo(this);"></i>
        </div>
        <div class="col">
            @Html.Label("Cell No", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.CellNo, new
            {
                htmlAttributes = new
                {
                    @class = "form-control CustCellNo",
                    @onchange = "checkDuplicateLead();",
                    @type = "number",
                    @minlength = "10",
                    @maxlength = "10"@*@oninput="javascript:if(this.value.length >10) {alert(this.value.length);return false;}"*@}
})
            @*<input type="button" class="btn-danger deleteTextboxButton" value="-" onclick="deleteTextbox(this);">*@
            <i class="fa fa-minus btn btn-danger deleteTextboxButton" onclick="deleteTextbox(this);"></i>
            @*@Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger" })*@
            <i class="fa fa-plus btn btn-primary addTextboxButton" onclick="AddCustCellNo(this);"></i>
        </div>
        <div class="col">
            @Html.Label("Email", htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.EmailID, new { htmlAttributes = new { @class = "form-control CustEmail", @maxlength = "50" } })
            @*<input type="button" class="btn-danger deleteTextboxButton" value="-" onclick="deleteTextbox(this);">*@
            <i class="fa fa-minus btn btn-danger deleteTextboxButton" onclick="deleteTextbox(this);"></i>
            <i class="fa fa-plus btn btn-primary addTextboxButton" onclick="AddCustEmail(this);"></i>
            @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h6>Consult Person</h6>
    <div class="form-group ConsultPerson row" id="ConsultPerson" style="display:none;">
        <div class="col">
            @Html.Label("Name", "Name")
            @Html.Editor("ConsultPersonName", new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @maxlength = "50" } })
            @*@Html.Editor("Lead_Consult_Person.PersonName", new { htmlAttributes = new { @class = "form-control" } })*@

        </div>

        <div class="col">
            @Html.Label("Designation", "Designation")
            @Html.Editor("Designation", new { htmlAttributes = new { @class = "form-control", @maxlength = "20" } })
        </div>

        <div class="col">
            @Html.Label("Contact Number", "Contact Number")
            @Html.Hidden("ConsultContactNumberHidden", "")
            @Html.Editor("ConsultContactNumber", new { htmlAttributes = new { @class = "form-control ConsultContactNumber", @maxlength = "20" } })
            @*<input type="button" class="btn-danger deleteTextboxButton" value="-" onclick="deleteTextbox(this);">*@
            @*<i class="fa fa-minus btn btn-danger deleteTextboxButton" onclick="deleteTextbox(this);"></i>*@
            <i class="fa fa-minus btn btn-danger deleteTextboxButton" onclick="deleteTextbox(this);"></i>
            <i class="fa fa-plus btn btn-primary addTextboxButton" onclick="AddConsultContactNumber(this);"></i>
        </div>

        <div class="col">
            @Html.Label("Email", "Email")
            @Html.Hidden("ConsultEmailHidden", "")
            @Html.Editor("ConsultEmail", new { htmlAttributes = new { @class = "form-control ConsultEmail", @maxlength = "50" } })
            @*<input type="button" class="btn-danger deleteTextboxButton" value="-" onclick="deleteTextbox(this);">*@
            <i class="fa fa-minus btn btn-danger deleteTextboxButton" onclick="deleteTextbox(this);"></i>
            <i class="fa fa-plus btn btn-primary addTextboxButton" onclick="AddConsultEmail(this);"></i>
        </div>
        <div class="col-md-1">
            @Html.Label("Delete", "Delete")
            <i class="fa fa-trash form-control" style="color:red; border:none; box-shadow:none;" onclick="deleteConsultPerson(this);"></i>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-12">
            <button type="button" class="btn btn-outline-secondary" style="float:right;" id="AddMoreConsultPerson">Add More</button>
        </div>
    </div>
    <hr />
    <h6>Services required</h6>
    <div class="form-group SingleService row" id="SingleService">

        <div class="col">
            @Html.Label("Service Group", "Service Group", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("ServiceGroupID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control ServiceGroupID restrict-dropdown-widths selectpicker", @onchange = "populateServices(this);", @data_live_search = "true" })
        </div>

        <div class="col">
            @Html.Label("Service", "Service", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("ServiceID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control ServiceID restrict-dropdown-widths selectpicker", @data_live_search = "true", @onchange = "calculateTax(this);" })
        </div>

        <div class="col" style="max-width:46 !important">
            @Html.Label("Frequency Of Service", "Frequency Of Service", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("FrequencyOfServiceID", null, "-- SELECT --", htmlAttributes: new
            {
                @class = "form-control restrict-dropdown-widths selectpicker",
                @data_live_search = "true"@*, @data_width="50%"*@})
        </div>
        @*<div class="row">

            </div>*@

        <div class="col-md-1">
            @Html.Label("Qty", "Qty", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("Qty", new { htmlAttributes = new { @class = "form-control", @type = "number", @onchange = "calculateTax(this);" } })
        </div>
        <div class="col-md-1">
            @Html.Label("Rate", "Rate", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("Rate", new { htmlAttributes = new { @class = "form-control singleServiceRate", @type = "number", @onchange = "calculateTax(this);" } })
        </div>
        <div class="col-md-1">
            @Html.Label("GST", "GST", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("GST", new List<SelectListItem>(){
                                               new SelectListItem() { Text = "Yes", Value = "True" },
                                               new SelectListItem() { Text = "No", Value = "False"}
                                            }, "--", new { @class = "form-control", @onchange = "calculateTax(this);" })
        </div>
        <div class="col-md-1">
            @Html.Label("Tax", "Tax", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("Tax", new { htmlAttributes = new { @class = "form-control", @type = "number", @onchange = "addServiceTotal();", @readonly = "readonly" } })
        </div>
        <div class="col-md-1">
            @Html.Label("Final Rate", "Final Rate", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("FinalRatePerService", new { htmlAttributes = new { @class = "form-control singleServiceFinalRate", @type = "number", @onchange = "addFinalServiceTotal();", @readonly = "readonly" } })
        </div>
        <div class="col-md-1">
            @Html.Label("Delete", "Delete", htmlAttributes: new { @class = "control-label" })
            <i class="fa fa-trash form-control" style="color:red; border:none; box-shadow:none;" onclick="deleteService(this);"></i>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-10">
            @Html.Label("Total", "Total R/O (-/+)", new { @style = "float:right;" })
        </div>
        <div class="col-md-2">
            <input class="form-control text-box single-line" id="FinalRate" name="FinalRate" type="text" readonly style="float:right;">
        </div>
    </div>
    <div class="form-group  row">
        <div class="col-md-12">
            <button type="button" class="btn btn-outline-secondary" style="float:right;" id="AddMoreServices">Add More Service</button>
        </div>
    </div>
    <hr />
    <div class="form-group row">
        <div class="col">
            @Html.Label("Type Of Premises", "Type Of Premise", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("TypeOfPremisesID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @required = "required", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.TypeOfPremisesID, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-1" style="display:none" id="divNoOfWings">
            @Html.Label("No. of Wings", "No. Wings", htmlAttributes: new { @class = "control-label", @id = "labelNoOfWings", @style = "display:none" })
            @Html.Editor("NoOfWings", new { htmlAttributes = new { @class = "form-control", @type = "number" } })
            @Html.ValidationMessageFor(model => model.NoOfWings, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-1" style="display:none" id="divNoOfFloors">
            @Html.Label("No. Floors", "No. Floors", htmlAttributes: new { @class = "control-label", @id = "labelNoOfFloors", @style = "display:none" })
            @Html.Editor("NoOfFloors", new { htmlAttributes = new { @class = "form-control", @type = "number" } })
            @Html.ValidationMessageFor(model => model.NoOfFloors, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-1" style="display:none" id="divNoOfFlats">
            @Html.Label("No. of Flats", "No. of Flats", htmlAttributes: new { @class = "control-label", @id = "labelNoOfFlats", @style = "display:none" })
            @Html.Editor("NoOfFlats", new { htmlAttributes = new { @class = "form-control", @type = "number" } })
            @Html.ValidationMessageFor(model => model.NoOfFlats, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Premises Area", "Premises Area", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("Premises_Area_ID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search = "true" })
            @*@Html.Editor("PremisesArea", new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.Premises_Area_ID, "", new { @class = "text-danger" })
        </div>

        <div class="col">
            @Html.Label("Approx. Sq.Ft. Area", "Approx. Sq.Ft. Area", htmlAttributes: new { @class = "control-label" })
            @Html.Editor("PremisesAppSqFtArea", new { htmlAttributes = new { @class = "form-control", @type = "number" } })
            @Html.ValidationMessageFor(model => model.PremisesAppSqFtArea, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Other Details", htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.OtherDetails, 1, 100, new { @class = "form-control", @maxlength = "200" })
            @Html.ValidationMessageFor(model => model.OtherDetails, "", new { @class = "text-danger" })
        </div>
        <div class="col">
            @Html.Label("Industry", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("IndustryID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.IndustryID, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group  row">
        <div class="col">
            @Html.Label("Visit Allocate", htmlAttributes: new { @class = "control-label", @id = "VisitAllocateLabel" })
            @Html.DropDownList("VisitAllocate", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @data_live_search = "true" })
            @*@Html.EditorFor(model => model.VisitAllocate, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.VisitAllocate, "", new { @class = "text-danger" })
        </div>

        <div class="col">
            @Html.Label("Visit Date", htmlAttributes: new { @class = "control-label", @id = "VisitDateTimeLabel" })
            @Html.EditorFor(model => model.VisitDateTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.VisitDateTime, "", new { @class = "text-danger" })
        </div>

        <div class="col">
            @Html.Label("Visit Time", htmlAttributes: new { @class = "control-label", @id = "VisitTimeLabel" })
            @Html.EditorFor(model => model.VisitTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.VisitTime, "", new { @class = "text-danger" })
        </div>

        <div class="col">
            @Html.Label("Service Date", htmlAttributes: new { @class = "control-label", @id = "ServiceDateLabel" })
            @Html.EditorFor(model => model.ServiceDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ServiceDate, "", new { @class = "text-danger" })
        </div>

        <div class="col">
            @Html.Label("Service Time", htmlAttributes: new { @class = "control-label", @id = "ServiceTimeLabel" })
            @Html.EditorFor(model => model.ServiceTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ServiceTime, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">

        <div class="col-5">
            @Html.Label("Visit Report", htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.VisitReport, 1, 100, new { @class = "form-control", @style = "max-width: 96% !important;", @maxlength = "200" })
            @Html.ValidationMessageFor(model => model.VisitReport, "", new { @class = "text-danger" })
        </div>
        <div class="row col-7">
            <div class="col">
                @Html.Label("Special Instructions", htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.SpecialInstructions, 1, 100, new { @class = "form-control", @style = "max-width: 96% !important;", @maxlength = "200" })
                @Html.ValidationMessageFor(model => model.SpecialInstructions, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.Label("Source", "Source", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownList("SourceID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @required = "required", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.SourceID, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.Label("SubSource", "Sub Source", htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownList("SubSourceID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker", @required = "required", @data_live_search = "true", @data_size = "5" })
                @Html.ValidationMessageFor(model => model.SubSourceID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group row">

        <div class="col-md-5">
            @Html.Label("Follow-Up Details", htmlAttributes: new { @class = "control-label required", @id = "FollowUpDetailsLabel" })
            @Html.TextAreaFor(model => model.FollowUpDetails, 1, 100, new { @class = "form-control", @style = "max-width: 96% !important;", @required = "required", @maxlength = "200" })
            @Html.ValidationMessageFor(model => model.FollowUpDetails, "", new { @class = "text-danger" })
        </div>
        <div class="row col-7">
            <div class="col">
                @Html.Label("Next Follow-Up Date", htmlAttributes: new { @class = "control-label  required", @id = "NextFollowUpDateTimeLabel" })
                @Html.EditorFor(model => model.NextFollowUpDateTime, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.NextFollowUpDateTime, "", new { @class = "text-danger" })
            </div>

            <div class="col">
                @Html.Label("Next Follow-Up Time", htmlAttributes: new { @class = "control-label  required", @id = "NextFollowUpTimeLabel" })
                @Html.EditorFor(model => model.NextFollowUpTime, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.NextFollowUpDateTime, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.Label("Customer Priority", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.CustomerPriority, new List<SelectListItem>(){
                                                   new SelectListItem() { Text = "Very High", Value = "Very High" },
                                                   new SelectListItem() { Text = "High", Value = "High"},
                                                   new SelectListItem() { Text = "Medium", Value = "Medium"},
                                                   new SelectListItem() { Text = "Low", Value = "Low"}
                                                }, "-- SELECT --", new { @class = "form-control selectpicker", @data_live_search = "true" })
                @Html.ValidationMessageFor(model => model.CustomerPriority, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>
    <hr />
    <div class="form-group row">
        <hr />
        <div class="col-md-3">
            @Html.Label("Lead Status", "Lead Status", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("LeadStatusID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker dropup", @data_live_search = "true", @required = "required", })
            @Html.ValidationMessageFor(model => model.LeadStatusID, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-3">
            @Html.Label("Status Reason", htmlAttributes: new { @class = "control-label", @disabled = "disabled" })
            @Html.EditorFor(model => model.StatusReason, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StatusReason, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-3">
            @Html.Label("Branch", "Branch", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("BranchID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker dropup Branch", @required = "required", @data_live_search = "true", @data_dropup_auto = "false" })
            @Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-3">
            @Html.Label("Tele-Caller", "Tele Caller", htmlAttributes: new { @class = "control-label required" })
            @Html.DropDownList("TeleCallerID", null, "-- SELECT --", htmlAttributes: new { @class = "form-control selectpicker dropup", @required = "required", @data_live_search = "true" })
        </div>
    </div>
    <div class="form-group" style="display:none">
        @Html.Label("Created Date", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
        </div>
        @Html.Label("Last Updated Date", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.LastUpdatedDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastUpdatedDate, "", new { @class = "text-danger" })
        </div>
        @Html.Label("Created By", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display:none">
        @Html.Label("Last Updated By", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.LastUpdatedBy, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastUpdatedBy, "", new { @class = "text-danger" })
        </div>
    </div>
    <input type="hidden" id="SubmitType" name="SubmitType" value="">
    <div class="form-group">
        <div class="col-md-12">

            <input type="submit" value="Save & Create New Lead" class="btn btn-secondary submit-button-before-redirect" style="float:right;margin-left:5px;" id="SaveAndCreate" onclick="assignSubmitType(this);" />
            <input type="submit" value="Save" class="btn btn-outline-secondary submit-button-before-redirect" style="float:right;" id="Save" onclick="assignSubmitType(this);" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @type = "button", @class = "btn btn-outline-secondary" })
</div>

@*@section Scripts {

    }*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>
@*For Multiselect - Bootstrap Select*@
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css">
<!-- Latest compiled and minified JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js"></script>

<!-- (Optional) Latest compiled and minified JavaScript translation files -->
@*<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/i18n/defaults-*.min.js"></script>*@
<script>
    function assignSubmitType(obj) {
        
        $("#SubmitType").val($(obj).val())
    }
    //$("input").attr("required", true);
    //$("select").attr("required", true);
    var yesterday = new Date(Date.now() - 86400000);
    $("#LeadDate").datetimepicker({
        format: 'DD/MM/YYYY',
        useCurrent: false,
        defaultDate: new Date()
    });
    $("#NextFollowUpDateTime").datetimepicker({
        format: 'DD/MM/YYYY',
        minDate: yesterday,
        disabledDates: [yesterday],
        useCurrent: false
    }).on('dp.change', function (e) {
        if ($(this).val() != "") {
            $("#NextFollowUpTimeLabel").addClass("required");
            $("#NextFollowUpTime").prop('required', true);
            $("#FollowUpDetailsLabel").addClass("required");
            $("#lead_NextFollowUpDateTime").prop('required', true);
        }
        else {
        }
    });
    $("#VisitDateTime").datetimepicker({
        format: 'DD/MM/YYYY',
        //minDate: yesterday,
        disabledDates: [yesterday],
        useCurrent: false
    });
    $("#VisitTime").datetimepicker({
        format: 'hh:mm A',
        useCurrent: false
    });

    $("#ServiceDate").datetimepicker({
        format: 'DD/MM/YYYY',
        minDate: yesterday,
        disabledDates: [yesterday],
        useCurrent: false
    }).on('dp.change', function (e) {
        var selectedTextLeadStatusID = $("#LeadStatusID option:selected").html();
        if ($(this).val() == "") {
            if (selectedTextLeadStatusID != "Closed" && selectedTextLeadStatusID != "Rejected" && selectedTextLeadStatusID != "Done") {
                $("#NextFollowUpDateTimeLabel").addClass("required");
                $("#NextFollowUpDateTime").prop('required', true);
                $("#NextFollowUpTimeLabel").addClass("required");
                $("#NextFollowUpTime").prop('required', true);
                $("#FollowUpDetailsLabel").addClass("required");
                $("#FollowUpDetails").prop('required', true);
            } else {
                $("#NextFollowUpDateTimeLabel").removeClass("required");
                $("#NextFollowUpDateTime").prop('required', false);
                $("#NextFollowUpTimeLabel").removeClass("required");
                $("#NextFollowUpTime").prop('required', false);
                $("#FollowUpDetailsLabel").removeClass("required");
                $("#FollowUpDetails").prop('required', false);
            }
           
        }
        else {
           
            if (selectedTextLeadStatusID != "Process" && selectedTextLeadStatusID != "Visit Allocate") {
                $("#NextFollowUpDateTimeLabel").removeClass("required");
                $("#NextFollowUpDateTime").prop('required', false);
                $("#NextFollowUpTimeLabel").removeClass("required");
                $("#NextFollowUpTime").prop('required', false);
                $("#FollowUpDetailsLabel").removeClass("required");
                $("#FollowUpDetails").prop('required', false);
            }
        }
    });
    $("#ServiceTime").datetimepicker({
        format: 'hh:mm A',
        useCurrent: false
    });
    $("#NextFollowUpTime").datetimepicker({
        format: 'hh:mm A',
        useCurrent: false
    });
    $.validator.addMethod(
        "australianDate",
        function (value, element) {

            //return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
            return value.match(/(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4} (2[0-3]|[01][0-9]):[0-5][0-9]$/);
        },
        "Please enter a date in the format dd/mm/yyyy HH:mm."
    );
    //$.validator.addClassRules("CustCellNo", {
    //    required: false,
    //    minlength: 10,
    //    maxlength: 10
    //});
    $.validator.addMethod(
        "dateOnly",
        function (value, element) {
            debugger;
            //alert($(element));
            if (element.id == "NextFollowUpDateTime") {
                if ($("#LeadStatusID").val() == "2") {
                    return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
                } else {
                    if (value) {
                        return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
                    } else {
                        return true;
                    }
                }
            } else {
                return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
            }
            // put your own logic here, this is just a (crappy) example

        },
        "Please enter a date in the format dd/mm/yyyy."
    );
    $.validator.addMethod(
        "dateOnlyOrBlank",
        function (value, element) {
            // put your own logic here, this is just a (crappy) example
            if (value) {
                return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);
            } else {
                return true;
            }
        },
        "Please enter a date in the format dd/mm/yyyy."
    );
    $('#LeadsCreate')
        .validate({
            rules: {
                LeadDate: {
                    dateOnly: true
                },
                NextFollowUpDateTime: {
                    dateOnlyOrBlank: true
                }, VisitDateTime: {
                    dateOnlyOrBlank: true
                }, ServiceDate: {
                    dateOnlyOrBlank: true
                }
            
            }
            ,
            errorPlacement: function (error, element) {
                if (element.hasClass("selectpicker"))
                    error.insertAfter(element.next(".btn"));
                else if (element.hasClass("CustCellNo"))
                    error.insertAfter(element.next(".deleteTextboxButton"));
                else
                     error.insertAfter(element);
                    

            }
        });

</script>
<script>
    $('#AddMoreServices').click(function () {

        // Create clone of <div class='input-form'>
        var newel = $('.SingleService:last').clone();

        newel.find('input[type=number]').each(function () {
            //alert(this.val());
            $(this).val('');
        });

        //newel.find("#ServiceGroupID").selectpicker('refresh');

        newel.find('.bootstrap-select').replaceWith(function () { return $('select', this); }) 
        newel.find('.selectpicker').selectpicker('render'); 

        //newel.find('.selectpicker').each(function () {
        //    debugger;
        //    alert($(this).val());
        //    $cloned.find('.bootstrap-select').replaceWith(function() { return $('select', this); })    
        //    $cloned .find('.selectpicker').selectpicker('render'); 
        //    //$(this).val('');
        //    //$(this).selectpicker('refresh');
            
        //    //$(this).addClass('selectpicker');
        //});


        // Add after last <div class='input-form'>
        $(newel).insertAfter(".SingleService:last");
        return false;
    });
    $('#AddMoreConsultPerson').click(function () {

        // Create clone of <div class='input-form'>
        var newel = $('.ConsultPerson:first').clone().removeAttr('style');
        //alert(newle);
        // Add after last <div class='input-form'>
        $(newel).insertAfter(".ConsultPerson:last");
        return false;
    });
    $("#LeadsCreate").submit(function (event) {
        //var leaddate = $('#LeadDate').val();
        //var newleaddate = leaddate.split("/").reverse().join("/");
        //$('#LeadDate').val(newleaddate);
        //var followupdate = $('#NextFollowUpDateTime').val();
        //var newfollowupdate = followupdate.split("/").reverse().join("/");
        //$('#NextFollowUpDateTime').val(newfollowupdate);

        //for consult contact no.
        //var selectedTextLeadStatusID = $("#LeadStatusID option:selected").html();
        //if (selectedTextLeadStatusID == "Process" || selectedTextLeadStatusID == "Visit Allocate") {
        //    $("#NextFollowUpDateTimeLabel").addClass("required");
        //    $("#NextFollowUpDateTime").prop('required', true);
        //    $("#NextFollowUpTimeLabel").addClass("required");
        //    $("#NextFollowUpTime").prop('required', true);
        //    $("#FollowUpDetailsLabel").addClass("required");
        //    $("#FollowUpDetails").prop('required', true);
        //    $("#LeadsCreate").validate();
        //}

        debugger;
        var consultpersons = $('div[id="ConsultPerson"]');
        for (i = 1; i < consultpersons.length; i++) {
            var consultContactNumberHidden = $(consultpersons[i]).find("#ConsultContactNumberHidden");
            var consultEmailHidden = $(consultpersons[i]).find("#ConsultEmailHidden");
            $(consultContactNumberHidden).val("");
            $(consultEmailHidden).val("");
            var consultpersoncontact = $(consultpersons[i]).find(".ConsultContactNumber")
            for (j = 0; j < consultpersoncontact.length; j++) {
                $(consultContactNumberHidden).val($(consultContactNumberHidden).val() + $(consultpersoncontact[j]).val() + "|");
            }
            var consultpersonemail = $(consultpersons[i]).find(".ConsultEmail")
            for (j = 0; j < consultpersonemail.length; j++) {
                $(consultEmailHidden).val($(consultEmailHidden).val() + $(consultpersonemail[j]).val() + "|");
            }
            //alert($(consultContactNumberHidden).val());
            //alert($(consultEmailHidden).val());
            $(consultContactNumberHidden).val($(consultContactNumberHidden).val().slice(0, -1));
            $(consultEmailHidden).val($(consultEmailHidden).val().slice(0, -1));
            //alert($(consultContactNumberHidden).val());
            //alert($(consultEmailHidden).val());
        }
        //return false;
    });

    function AddConsultContactNumber(obj) {
        //alert();
        var newel = $('#ConsultContactNumber:first').clone().val('');
        $(newel).insertBefore(obj);
        newel = $('.deleteTextboxButton:first').clone();
        $(newel).insertBefore(obj);
        return false;
    }
    function AddCustTelNo(obj) {
        var newel = $('#TelNo:first').clone().val('');
        $(newel).insertBefore(obj);
        newel = $('.deleteTextboxButton:first').clone();
        $(newel).insertBefore(obj);
        return false;
    }
    function AddCustCellNo(obj) {
        var newel = $('#CellNo:first').clone().val('');
        $(newel).insertBefore(obj);
        newel = $('.deleteTextboxButton:first').clone();
        $(newel).insertBefore(obj);
        return false;
    }
    function AddCustEmail(obj) {
        var newel = $('#EmailID:first').clone().val('');
        $(newel).insertBefore(obj);
        newel = $('.deleteTextboxButton:first').clone();
        $(newel).insertBefore(obj);
        return false;
    }

    function AddConsultEmail(obj) {
        //alert();
        var newel = $('#ConsultEmail:first').clone().val('');
        $(newel).insertBefore(obj);
        newel = $('.deleteTextboxButton:first').clone();
        $(newel).insertBefore(obj);
        return false;
    }
    function deleteService(obj) {
        //alert();
        if ($('.SingleService').length < 2) {
            alert('At least one Service is Required');
        }
        else {
            $(obj).parent().closest('.SingleService').remove();
        }
        addFinalServiceTotal();
    }
    function deleteConsultPerson(obj) {
        //alert();
        //if ($('.SingleService').length < 2) {
        //    alert('At least one Service is Required');
        //}
        //else {
        $(obj).parent().closest('.ConsultPerson').remove();
        //}
    }
    $("#Title").change(function () {
        var title = $("#Title").val();
        if (title == "Mr." || title == "Mrs." || title == "Ms.") {
            $("#DivCommercialName").css('display', 'none');
            $("#CustomerName").removeAttr('required');
            $("#DivFirstName").css('display', 'block');
            $("#FirstName").prop('required', true);
            $("#DivLastName").css('display', 'block');
            ///$("#LastName").prop('required', true);
        }
        else if (title == "M/S." || title == "") {
            $("#DivCommercialName").css('display', 'block').prop('required', true);
            $("#CustomerName").prop('required', true);
            $("#DivFirstName").css('display', 'none').removeAttr('required');
            $("#FirstName").removeAttr('required');
            $("#DivLastName").css('display', 'none').removeAttr('required');
            ///$("#LastName").removeAttr('required');
        }
    });
    $("#LeadStatusID").change(function () {
        var selectedText = $("#LeadStatusID option:selected").html();
        if (selectedText == "Closed" || selectedText == "Rejected") {
            $("#StatusReason").prop('disabled', false);
            $("#StatusReason").prop('required', true);
        }
        else {
            $("#StatusReason").prop('disabled', true);
            $('#StatusReason').removeAttr('required');
            resetInputs();
        }
        if (selectedText == "Process" || selectedText == "Visit Allocate") {
            $("#NextFollowUpDateTimeLabel").addClass("required");
            $("#NextFollowUpDateTime").prop('required', true);
            $("#NextFollowUpTimeLabel").addClass("required");
            $("#NextFollowUpTime").prop('required', true);
            $("#FollowUpDetailsLabel").addClass("required");
            $("#FollowUpDetails").prop('required', true);
        }
        else if (selectedText == "Closed" || selectedText == "Rejected" || selectedText == "Done"){
            
                $("#NextFollowUpDateTimeLabel").removeClass("required");
                $("#NextFollowUpDateTime").prop('required', false);
                $("#NextFollowUpTimeLabel").removeClass("required");
                $("#NextFollowUpTime").prop('required', false);
                $("#FollowUpDetailsLabel").removeClass("required");
                $("#FollowUpDetails").prop('required', false);
            
        }
        else {
            if ($("#ServiceDate").val() != "") {
                $("#NextFollowUpDateTimeLabel").removeClass("required");
                $("#NextFollowUpDateTime").prop('required', false);
                $("#NextFollowUpTimeLabel").removeClass("required");
                $("#NextFollowUpTime").prop('required', false);
                $("#FollowUpDetailsLabel").removeClass("required");
                $("#FollowUpDetails").prop('required', false);
            }
        }
        
        if (selectedText == "Visit Allocate") {
            
            $("#VisitDateTimeLabel").addClass("required");
            $("#VisitDateTime").prop('required', true);
            $("#VisitTimeLabel").addClass("required");
            $("#VisitTime").prop('required', true);
            $("#VisitAllocateLabel").addClass("required");
            $("#VisitAllocate").prop('required', true);
        }else {
            $("#VisitDateTimeLabel").removeClass("required");
            $("#VisitDateTime").prop('required', false);
            $("#VisitTimeLabel").removeClass("required");
            $("#VisitTime").prop('required', false);
            $("#VisitAllocateLabel").removeClass("required");
            $("#VisitAllocate").prop('required', false);
        }
        if (selectedText == "Done") {
            $("#ServiceDateLabel").addClass("required");
            $("#ServiceDate").prop('required', true);
            $("#ServiceTimeLabel").addClass("required");
            $("#ServiceTime").prop('required', true);
        } else {
            $("#ServiceDateLabel").removeClass("required");
            $("#ServiceDate").prop('required', false);
            $("#ServiceTimeLabel").removeClass("required");
            $("#ServiceTime").prop('required', false);
        }
    });

    function addServiceTotal() {

        //var sum = 0;
        //$(".singleServiceRate").each(function () {
        //    sum += +$(this).val();
        //});
        //$("#FinalRate").val(sum);
    }
    function addFinalServiceTotal() {

        var sum = 0;
        $(".singleServiceFinalRate").each(function () {
            sum += +$(this).val();
        });
        $("#FinalRate").val(Math.round(sum));
    }
    $("#TypeOfPremisesID").change(function () {

        if ($("#TypeOfPremisesID").val() == "3") {
            $("#labelNoOfWings").css('display', "block");
            $("#divNoOfWings").css("display", "block");
            $("#labelNoOfFloors").css("display", "block");
            $("#divNoOfFloors").css("display", "block");
            $("#labelNoOfFlats").css("display", "block");
            $("#divNoOfFlats").css("display", "block");
        } else {
            $("#labelNoOfWings").css("display", "none");
            $("#divNoOfWings").css("display", "none");
            $("#labelNoOfFloors").css("display", "none");
            $("#divNoOfFloors").css("display", "none");
            $("#labelNoOfFlats").css("display", "none");
            $("#divNoOfFlats").css("display", "none");
        }
    });
    function populateServices(obj) {

        if ($(obj).val() == "") {
            var services = "<select class='form-control restrict-dropdown-widths selectpicker' data_live_search='true' id='ServiceID' name = 'ServiceID'  onchange='calculateTax(this);'>";
            services = services + '<option value>--SELECT--</option>';
            services = services + '</select>';
            $(obj).parent().closest('.SingleService').find('#ServiceID').html(services);
            //$(obj).closest("#ServiceID").html(services);
        } else {
            $.ajax({
                type: "post",
                url: "/Leads/GetServices",
                data: { ServiceGroupID: $(obj).val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var services = "<select class='form-control restrict-dropdown-widths selectpicker' data_live_search='true' id='ServiceID' name = 'ServiceID' onchange='calculateTax(this);'>";
                    services = services + '<option value="">--SELECT--</option>';
                    for (var i = 0; i < data.length; i++) {
                        services = services + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    services = services + '</select>';
                    $(obj).parent().closest('.SingleService').find('#ServiceID').html(services);
                    $(obj).parent().closest('.SingleService').find('#ServiceID').selectpicker('refresh');
                    //$(obj).closest('#ServiceID').html(services);

                }
            });
        }
    }
    function calculateTax(obj) {
        debugger;
        //alert($(obj).prev('#ServiceGroupID').val());
        var gst = $(obj).parent().parent().find('#GST').val();
        //if (gst == "") {
        //    alert("Please select GST applicable or not!");
        //    return false;
        //}
        var serviceGroup = $(obj).parent().parent().find('#ServiceGroupID').val();
        var service = $(obj).parent().parent().find('#ServiceID').val();
        var freq = $(obj).parent().parent().find('#FrequencyOfServiceID').val();
        var qty = $(obj).parent().parent().find('#Qty').val();
        var rate = $(obj).parent().parent().find('#Rate').val();


        if (serviceGroup == '') {
            alert('Please select Service Group!');
            $(obj).parent().parent().find('#ServiceGroupID').focus();
            return false;
        }
        if (service == '') {
            alert('Please select Service!');
            $(obj).parent().parent().find('#ServiceID').focus();
            return false;
        }
        if (freq == '') {
            //alert('Please select Frequency of Service!');
            //$(obj).parent().parent().find('#FrequencyOfServiceID').focus();
            //return false;
        }
        if (qty == '') {
            //alert('Please enter Quantity!');
            //$(obj).parent().parent().find('#Qty').focus();
            //return false;
            qty = 1;
        }
        if (rate == '') {
            //alert('Please enter Rate!');
            //$(obj).parent().parent().find('#Rate').focus();
            return false;
        }
        // All values OK then proceed
        $.ajax({
            type: "post",
            url: "/Leads/GetSingleServiceTaxAfterGSTSelection",
            data: { ServiceID: service, Rate: rate, Qty: qty, GSTapplicable: gst },
            datatype: "json",
            traditional: true,
            success: function (data) {
                //alert(data);
                //var services = "<select id='ServiceID' name = 'ServiceID' required='required'>";
                //services = services + '<option value="">--SELECT--</option>';
                //for (var i = 0; i < data.length; i++) {
                //    services = services + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                //}
                //services = services + '</select>';
                //$(obj).parent().closest('.SingleService').find('#ServiceID').html(services);
                //$(obj).closest('#ServiceID').html(services);
                if (gst == "True") {
                    $(obj).parent().parent().find('#Tax').val(data);
                    $(obj).parent().parent().find('#FinalRatePerService').val((rate * qty) + data);
                } else {
                    $(obj).parent().parent().find('#Tax').val("0");
                    $(obj).parent().parent().find('#FinalRatePerService').val((rate * qty));
                }

                $(obj).parent().parent().find('#FinalRatePerService').change();
            }
        });

    }

    function deleteTextbox(obj) {
        debugger;
        if ($(obj).parent().find('.deleteTextboxButton').length == 1) {
            alert('At least one is Required!')
        } else {
            $(obj).prev().remove();
            $(obj).remove();
        }
    }
    function resetInputs() {
        debugger;
        var validator = $("#LeadsCreate").validate();
        validator.resetForm();
    }
    $(".Location").change(function () {

        if ($(this).val() == "") {
            $(".Branch").val("");
        } else {
            //alert($(this).val());
            //alert($("#LocationID" + $(this).val()).val());
            $(".Branch").val($("#LocationID" + $(this).val()).val());
            
        }
        $(".Branch").selectpicker('refresh');
    });

</script>
<script>
    function tenDigitsAllowed() {

        $.each($(".CustCellNo"), function (index, obj) {
            //alert(index + ": " + obj);
            if ($(obj).val().length != 10) {
                $(obj).focus();
                alert("Enter 10 digit Cell Number!");
                return false;
            }

        });

    }
    function checkDuplicateLead() {

        var cellNos = [];
        $.each($(".CustCellNo"), function (index, obj) {
            if ($(obj).val().length == 10) {
                cellNos.push($(obj).val());
            }
        });
        if ($("#Title").val() != "" && cellNos.length > 0) {
            //alert();
            $.ajax({
                type: "post",
                url: "/Leads/CheckDupliateLeads",
                data: { title: $("#Title").val(), FirstName: $("#FirstName").val(), LastName: $("#LastName").val(), CustomerName: $("#CustomerName").val(), CellNo: cellNos },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    if (data == "1") {
                        $(".duplicate").show();
                    } else {
                        $(".duplicate").hide();
                    }
                }
            });
        }

    }
    $('.submit-button-before-redirect').on("click", function () {

        $('#LeadsCreate').validate();//sets up the validation

        if ($('#LeadsCreate').valid()) { //checks if it's valid
            $.LoadingOverlay("show");
        }
        else {
            //alert("I'm not valid");
        }
    });


    //$(document).ready(function () {
        
    //$("#LeadStatusID").parent(".bootstrap-select").removeClass("dropdown");
    //});
</script>
